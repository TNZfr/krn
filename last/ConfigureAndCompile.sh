#!/bin/bash

. $KRN_EXE/_libkernel.sh

#-------------------------------------------------------------------------------
# main
#

CommandName=$(basename ${0%.sh})
if [ $# -lt 2 ]
then
    echo ""
    echo "Syntax : krn $CommandName Version|Archive KernelConfig"
    echo ""
    echo "  Version .... : Linux version"
    echo "  Archive .... : Linux source archive (tar.xz or tar.gz)"
    echo "  KernelConfig : File generated by krn KernelConfig command (config-Version-Label)"
    echo ""
    exit 1
fi

Version=$1
KernelConfig=$KRN_WORKSPACE/$2

# Conversion Archive -> Version (Cf KernelConfig -> GetKernel)
[ -f $Version ] && Version=$(echo ${Version%.tar.??}|cut -d'-' -f2-)

# KernelConfig
if [ ! -f $KernelConfig ]
then
    echo ""
    echo "ERROR : $(basename $KernelConfig) not found"
    echo ""
    exit 1
fi
KernelConfig=$(readlink -f $KernelConfig)
[ "$(basename $KernelConfig|grep rc)" = "" ] && LabelField=3 || LabelField=4
KernelConfig=$(basename $KernelConfig|cut -d'-' -f$LabelField)

Debut=$(TopHorloge)

# Configuration noyau
# -------------------
KernelSource=$(ls -1tr $KRN_WORKSPACE/linux-$Version.tar.?? 2>/dev/null|tail -1)
SetConfig.sh $KernelConfig >/dev/null

# Creation du workspace custom
# ----------------------------
if [ "$(echo $Version|grep rc)" = "" ]
then
    CustomWorkspace=$KRN_WORKSPACE/ckc-$Version-$Libelle
else
    CustomWorkspace=$KRN_WORKSPACE/ckc-$(echo $Version|cut -d'-' -f1).0-$(echo $Version|cut -d'-' -f2)-$Libelle
fi

mkdir -p $CustomWorkspace
export KRN_WORKSPACE=$CustomWorkspace

# Source telecharge avec KernelConfig
[ "$KernelSource" != "" ] && ln -s $KernelSource $KRN_WORKSPACE/$(basename $KernelSource)

# Compilation du noyau
# --------------------
case $CommandName in
    ConfComp)         Compile_${KRN_MODE}.sh           $Version ;;
    ConfCompSign)     CompileSign_${KRN_MODE}.sh       $Version ;;
    ConfCompInstall)  CompileInstall_${KRN_MODE}.sh     $Version ;;
    ConfCompSignInst) CompileSignInstall_${KRN_MODE}.sh $Version ;;
    *)
	echo ""
	echo "Unkonwn krn command : $CommandName"
	echo ""
esac

# Retour a la config par defaut
# -----------------------------
SetConfig.sh DEFAULT >/dev/null

echo ""
printf "\033[44m $CommandName elapsed \033[m : $(AfficheDuree $Debut $(TopHorloge))\n"
echo ""

exit 0
